// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddPool extends ethereum.Event {
  get params(): AddPool__Params {
    return new AddPool__Params(this);
  }
}

export class AddPool__Params {
  _event: AddPool;

  constructor(event: AddPool) {
    this._event = event;
  }

  get allocPoint(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewarder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FailedToNotifyRewarder extends ethereum.Event {
  get params(): FailedToNotifyRewarder__Params {
    return new FailedToNotifyRewarder__Params(this);
  }
}

export class FailedToNotifyRewarder__Params {
  _event: FailedToNotifyRewarder;

  constructor(event: FailedToNotifyRewarder) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetBonusEmissionRate extends ethereum.Event {
  get params(): SetBonusEmissionRate__Params {
    return new SetBonusEmissionRate__Params(this);
  }
}

export class SetBonusEmissionRate__Params {
  _event: SetBonusEmissionRate;

  constructor(event: SetBonusEmissionRate) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rewardPerSecond(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetEmissionRate extends ethereum.Event {
  get params(): SetEmissionRate__Params {
    return new SetEmissionRate__Params(this);
  }
}

export class SetEmissionRate__Params {
  _event: SetEmissionRate;

  constructor(event: SetEmissionRate) {
    this._event = event;
  }

  get moraPerSecond(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetPercent extends ethereum.Event {
  get params(): SetPercent__Params {
    return new SetPercent__Params(this);
  }
}

export class SetPercent__Params {
  _event: SetPercent;

  constructor(event: SetPercent) {
    this._event = event;
  }

  get burnPercent(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetPool extends ethereum.Event {
  get params(): SetPool__Params {
    return new SetPool__Params(this);
  }
}

export class SetPool__Params {
  _event: SetPool;

  constructor(event: SetPool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get allocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewarder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MasterChef__pendingRewardResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class MasterChef__poolInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }
}

export class MasterChef__trackedUserInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class MasterChef__userInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class MasterChef extends ethereum.SmartContract {
  static bind(address: Address): MasterChef {
    return new MasterChef("MasterChef", address);
  }

  burnAddress(): Address {
    let result = super.call("burnAddress", "burnAddress():(address)", []);

    return result[0].toAddress();
  }

  try_burnAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("burnAddress", "burnAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burnPercent(): BigInt {
    let result = super.call("burnPercent", "burnPercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_burnPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burnPercent", "burnPercent():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositTxs(): BigInt {
    let result = super.call("depositTxs", "depositTxs():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositTxs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositTxs", "depositTxs():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mora(): Address {
    let result = super.call("mora", "mora():(address)", []);

    return result[0].toAddress();
  }

  try_mora(): ethereum.CallResult<Address> {
    let result = super.tryCall("mora", "mora():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  moraPerSecond(): BigInt {
    let result = super.call("moraPerSecond", "moraPerSecond():(uint256)", []);

    return result[0].toBigInt();
  }

  try_moraPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "moraPerSecond",
      "moraPerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingReward(_pid: BigInt, _user: Address): MasterChef__pendingRewardResult {
    let result = super.call(
      "pendingReward",
      "pendingReward(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return new MasterChef__pendingRewardResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_pendingReward(
    _pid: BigInt,
    _user: Address
  ): ethereum.CallResult<MasterChef__pendingRewardResult> {
    let result = super.tryCall(
      "pendingReward",
      "pendingReward(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MasterChef__pendingRewardResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  poolInfo(param0: BigInt): MasterChef__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MasterChef__poolInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<MasterChef__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MasterChef__poolInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress()
      )
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startTime(): BigInt {
    let result = super.call("startTime", "startTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startTime", "startTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUsers(): BigInt {
    let result = super.call("totalUsers", "totalUsers():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalUsers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalUsers", "totalUsers():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trackedUserIndex(param0: Address): BigInt {
    let result = super.call(
      "trackedUserIndex",
      "trackedUserIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_trackedUserIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trackedUserIndex",
      "trackedUserIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trackedUserInfo(param0: BigInt): MasterChef__trackedUserInfoResult {
    let result = super.call(
      "trackedUserInfo",
      "trackedUserInfo(uint256):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MasterChef__trackedUserInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_trackedUserInfo(
    param0: BigInt
  ): ethereum.CallResult<MasterChef__trackedUserInfoResult> {
    let result = super.tryCall(
      "trackedUserInfo",
      "trackedUserInfo(uint256):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MasterChef__trackedUserInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  userInfo(param0: BigInt, param1: Address): MasterChef__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new MasterChef__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<MasterChef__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MasterChef__userInfoResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  withdrawTxs(): BigInt {
    let result = super.call("withdrawTxs", "withdrawTxs():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawTxs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdrawTxs", "withdrawTxs():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _mora(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _moraPerSecond(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _burnPercent(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPoolCall extends ethereum.Call {
  get inputs(): AddPoolCall__Inputs {
    return new AddPoolCall__Inputs(this);
  }

  get outputs(): AddPoolCall__Outputs {
    return new AddPoolCall__Outputs(this);
  }
}

export class AddPoolCall__Inputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddPoolCall__Outputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBonusEmissionRateCall extends ethereum.Call {
  get inputs(): SetBonusEmissionRateCall__Inputs {
    return new SetBonusEmissionRateCall__Inputs(this);
  }

  get outputs(): SetBonusEmissionRateCall__Outputs {
    return new SetBonusEmissionRateCall__Outputs(this);
  }
}

export class SetBonusEmissionRateCall__Inputs {
  _call: SetBonusEmissionRateCall;

  constructor(call: SetBonusEmissionRateCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rewardPerSecond(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBonusEmissionRateCall__Outputs {
  _call: SetBonusEmissionRateCall;

  constructor(call: SetBonusEmissionRateCall) {
    this._call = call;
  }
}

export class SetEmissionRateCall extends ethereum.Call {
  get inputs(): SetEmissionRateCall__Inputs {
    return new SetEmissionRateCall__Inputs(this);
  }

  get outputs(): SetEmissionRateCall__Outputs {
    return new SetEmissionRateCall__Outputs(this);
  }
}

export class SetEmissionRateCall__Inputs {
  _call: SetEmissionRateCall;

  constructor(call: SetEmissionRateCall) {
    this._call = call;
  }

  get _moraPerSecond(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetEmissionRateCall__Outputs {
  _call: SetEmissionRateCall;

  constructor(call: SetEmissionRateCall) {
    this._call = call;
  }
}

export class SetPercentCall extends ethereum.Call {
  get inputs(): SetPercentCall__Inputs {
    return new SetPercentCall__Inputs(this);
  }

  get outputs(): SetPercentCall__Outputs {
    return new SetPercentCall__Outputs(this);
  }
}

export class SetPercentCall__Inputs {
  _call: SetPercentCall;

  constructor(call: SetPercentCall) {
    this._call = call;
  }

  get _burnPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPercentCall__Outputs {
  _call: SetPercentCall;

  constructor(call: SetPercentCall) {
    this._call = call;
  }
}

export class SetPoolCall extends ethereum.Call {
  get inputs(): SetPoolCall__Inputs {
    return new SetPoolCall__Inputs(this);
  }

  get outputs(): SetPoolCall__Outputs {
    return new SetPoolCall__Outputs(this);
  }
}

export class SetPoolCall__Inputs {
  _call: SetPoolCall;

  constructor(call: SetPoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rewarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetPoolCall__Outputs {
  _call: SetPoolCall;

  constructor(call: SetPoolCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAllPoolsCall extends ethereum.Call {
  get inputs(): UpdateAllPoolsCall__Inputs {
    return new UpdateAllPoolsCall__Inputs(this);
  }

  get outputs(): UpdateAllPoolsCall__Outputs {
    return new UpdateAllPoolsCall__Outputs(this);
  }
}

export class UpdateAllPoolsCall__Inputs {
  _call: UpdateAllPoolsCall;

  constructor(call: UpdateAllPoolsCall) {
    this._call = call;
  }
}

export class UpdateAllPoolsCall__Outputs {
  _call: UpdateAllPoolsCall;

  constructor(call: UpdateAllPoolsCall) {
    this._call = call;
  }
}

export class UpdateMultiplePoolsCall extends ethereum.Call {
  get inputs(): UpdateMultiplePoolsCall__Inputs {
    return new UpdateMultiplePoolsCall__Inputs(this);
  }

  get outputs(): UpdateMultiplePoolsCall__Outputs {
    return new UpdateMultiplePoolsCall__Outputs(this);
  }
}

export class UpdateMultiplePoolsCall__Inputs {
  _call: UpdateMultiplePoolsCall;

  constructor(call: UpdateMultiplePoolsCall) {
    this._call = call;
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UpdateMultiplePoolsCall__Outputs {
  _call: UpdateMultiplePoolsCall;

  constructor(call: UpdateMultiplePoolsCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
