// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bar entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bar entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bar", id.toString(), this);
  }

  static load(id: string): Bar | null {
    return store.get("Bar", id) as Bar | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get mora(): Bytes {
    let value = this.get("mora");
    return value.toBytes();
  }

  set mora(value: Bytes) {
    this.set("mora", Value.fromBytes(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get ratio(): BigDecimal {
    let value = this.get("ratio");
    return value.toBigDecimal();
  }

  set ratio(value: BigDecimal) {
    this.set("ratio", Value.fromBigDecimal(value));
  }

  get xMoraMinted(): BigDecimal {
    let value = this.get("xMoraMinted");
    return value.toBigDecimal();
  }

  set xMoraMinted(value: BigDecimal) {
    this.set("xMoraMinted", Value.fromBigDecimal(value));
  }

  get xMoraBurned(): BigDecimal {
    let value = this.get("xMoraBurned");
    return value.toBigDecimal();
  }

  set xMoraBurned(value: BigDecimal) {
    this.set("xMoraBurned", Value.fromBigDecimal(value));
  }

  get moraStaked(): BigDecimal {
    let value = this.get("moraStaked");
    return value.toBigDecimal();
  }

  set moraStaked(value: BigDecimal) {
    this.set("moraStaked", Value.fromBigDecimal(value));
  }

  get moraStakedUSD(): BigDecimal {
    let value = this.get("moraStakedUSD");
    return value.toBigDecimal();
  }

  set moraStakedUSD(value: BigDecimal) {
    this.set("moraStakedUSD", Value.fromBigDecimal(value));
  }

  get moraHarvested(): BigDecimal {
    let value = this.get("moraHarvested");
    return value.toBigDecimal();
  }

  set moraHarvested(value: BigDecimal) {
    this.set("moraHarvested", Value.fromBigDecimal(value));
  }

  get moraHarvestedUSD(): BigDecimal {
    let value = this.get("moraHarvestedUSD");
    return value.toBigDecimal();
  }

  set moraHarvestedUSD(value: BigDecimal) {
    this.set("moraHarvestedUSD", Value.fromBigDecimal(value));
  }

  get xMoraAge(): BigDecimal {
    let value = this.get("xMoraAge");
    return value.toBigDecimal();
  }

  set xMoraAge(value: BigDecimal) {
    this.set("xMoraAge", Value.fromBigDecimal(value));
  }

  get xMoraAgeDestroyed(): BigDecimal {
    let value = this.get("xMoraAgeDestroyed");
    return value.toBigDecimal();
  }

  set xMoraAgeDestroyed(value: BigDecimal) {
    this.set("xMoraAgeDestroyed", Value.fromBigDecimal(value));
  }

  get users(): Array<string> {
    let value = this.get("users");
    return value.toStringArray();
  }

  set users(value: Array<string>) {
    this.set("users", Value.fromStringArray(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bar(): string | null {
    let value = this.get("bar");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bar(value: string | null) {
    if (value === null) {
      this.unset("bar");
    } else {
      this.set("bar", Value.fromString(value as string));
    }
  }

  get xMora(): BigDecimal {
    let value = this.get("xMora");
    return value.toBigDecimal();
  }

  set xMora(value: BigDecimal) {
    this.set("xMora", Value.fromBigDecimal(value));
  }

  get xMoraIn(): BigDecimal {
    let value = this.get("xMoraIn");
    return value.toBigDecimal();
  }

  set xMoraIn(value: BigDecimal) {
    this.set("xMoraIn", Value.fromBigDecimal(value));
  }

  get xMoraOut(): BigDecimal {
    let value = this.get("xMoraOut");
    return value.toBigDecimal();
  }

  set xMoraOut(value: BigDecimal) {
    this.set("xMoraOut", Value.fromBigDecimal(value));
  }

  get xMoraMinted(): BigDecimal {
    let value = this.get("xMoraMinted");
    return value.toBigDecimal();
  }

  set xMoraMinted(value: BigDecimal) {
    this.set("xMoraMinted", Value.fromBigDecimal(value));
  }

  get xMoraBurned(): BigDecimal {
    let value = this.get("xMoraBurned");
    return value.toBigDecimal();
  }

  set xMoraBurned(value: BigDecimal) {
    this.set("xMoraBurned", Value.fromBigDecimal(value));
  }

  get xMoraOffset(): BigDecimal {
    let value = this.get("xMoraOffset");
    return value.toBigDecimal();
  }

  set xMoraOffset(value: BigDecimal) {
    this.set("xMoraOffset", Value.fromBigDecimal(value));
  }

  get xMoraAge(): BigDecimal {
    let value = this.get("xMoraAge");
    return value.toBigDecimal();
  }

  set xMoraAge(value: BigDecimal) {
    this.set("xMoraAge", Value.fromBigDecimal(value));
  }

  get xMoraAgeDestroyed(): BigDecimal {
    let value = this.get("xMoraAgeDestroyed");
    return value.toBigDecimal();
  }

  set xMoraAgeDestroyed(value: BigDecimal) {
    this.set("xMoraAgeDestroyed", Value.fromBigDecimal(value));
  }

  get moraStaked(): BigDecimal {
    let value = this.get("moraStaked");
    return value.toBigDecimal();
  }

  set moraStaked(value: BigDecimal) {
    this.set("moraStaked", Value.fromBigDecimal(value));
  }

  get moraStakedUSD(): BigDecimal {
    let value = this.get("moraStakedUSD");
    return value.toBigDecimal();
  }

  set moraStakedUSD(value: BigDecimal) {
    this.set("moraStakedUSD", Value.fromBigDecimal(value));
  }

  get moraHarvested(): BigDecimal {
    let value = this.get("moraHarvested");
    return value.toBigDecimal();
  }

  set moraHarvested(value: BigDecimal) {
    this.set("moraHarvested", Value.fromBigDecimal(value));
  }

  get moraHarvestedUSD(): BigDecimal {
    let value = this.get("moraHarvestedUSD");
    return value.toBigDecimal();
  }

  set moraHarvestedUSD(value: BigDecimal) {
    this.set("moraHarvestedUSD", Value.fromBigDecimal(value));
  }

  get moraOut(): BigDecimal {
    let value = this.get("moraOut");
    return value.toBigDecimal();
  }

  set moraOut(value: BigDecimal) {
    this.set("moraOut", Value.fromBigDecimal(value));
  }

  get moraIn(): BigDecimal {
    let value = this.get("moraIn");
    return value.toBigDecimal();
  }

  set moraIn(value: BigDecimal) {
    this.set("moraIn", Value.fromBigDecimal(value));
  }

  get usdOut(): BigDecimal {
    let value = this.get("usdOut");
    return value.toBigDecimal();
  }

  set usdOut(value: BigDecimal) {
    this.set("usdOut", Value.fromBigDecimal(value));
  }

  get usdIn(): BigDecimal {
    let value = this.get("usdIn");
    return value.toBigDecimal();
  }

  set usdIn(value: BigDecimal) {
    this.set("usdIn", Value.fromBigDecimal(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get moraOffset(): BigDecimal {
    let value = this.get("moraOffset");
    return value.toBigDecimal();
  }

  set moraOffset(value: BigDecimal) {
    this.set("moraOffset", Value.fromBigDecimal(value));
  }

  get usdOffset(): BigDecimal {
    let value = this.get("usdOffset");
    return value.toBigDecimal();
  }

  set usdOffset(value: BigDecimal) {
    this.set("usdOffset", Value.fromBigDecimal(value));
  }
}

export class History extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save History entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save History entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("History", id.toString(), this);
  }

  static load(id: string): History | null {
    return store.get("History", id) as History | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get timeframe(): string {
    let value = this.get("timeframe");
    return value.toString();
  }

  set timeframe(value: string) {
    this.set("timeframe", Value.fromString(value));
  }

  get moraStaked(): BigDecimal {
    let value = this.get("moraStaked");
    return value.toBigDecimal();
  }

  set moraStaked(value: BigDecimal) {
    this.set("moraStaked", Value.fromBigDecimal(value));
  }

  get moraStakedUSD(): BigDecimal {
    let value = this.get("moraStakedUSD");
    return value.toBigDecimal();
  }

  set moraStakedUSD(value: BigDecimal) {
    this.set("moraStakedUSD", Value.fromBigDecimal(value));
  }

  get moraHarvested(): BigDecimal {
    let value = this.get("moraHarvested");
    return value.toBigDecimal();
  }

  set moraHarvested(value: BigDecimal) {
    this.set("moraHarvested", Value.fromBigDecimal(value));
  }

  get moraHarvestedUSD(): BigDecimal {
    let value = this.get("moraHarvestedUSD");
    return value.toBigDecimal();
  }

  set moraHarvestedUSD(value: BigDecimal) {
    this.set("moraHarvestedUSD", Value.fromBigDecimal(value));
  }

  get xMoraAge(): BigDecimal {
    let value = this.get("xMoraAge");
    return value.toBigDecimal();
  }

  set xMoraAge(value: BigDecimal) {
    this.set("xMoraAge", Value.fromBigDecimal(value));
  }

  get xMoraAgeDestroyed(): BigDecimal {
    let value = this.get("xMoraAgeDestroyed");
    return value.toBigDecimal();
  }

  set xMoraAgeDestroyed(value: BigDecimal) {
    this.set("xMoraAgeDestroyed", Value.fromBigDecimal(value));
  }

  get xMoraMinted(): BigDecimal {
    let value = this.get("xMoraMinted");
    return value.toBigDecimal();
  }

  set xMoraMinted(value: BigDecimal) {
    this.set("xMoraMinted", Value.fromBigDecimal(value));
  }

  get xMoraBurned(): BigDecimal {
    let value = this.get("xMoraBurned");
    return value.toBigDecimal();
  }

  set xMoraBurned(value: BigDecimal) {
    this.set("xMoraBurned", Value.fromBigDecimal(value));
  }

  get xMoraSupply(): BigDecimal {
    let value = this.get("xMoraSupply");
    return value.toBigDecimal();
  }

  set xMoraSupply(value: BigDecimal) {
    this.set("xMoraSupply", Value.fromBigDecimal(value));
  }

  get ratio(): BigDecimal {
    let value = this.get("ratio");
    return value.toBigDecimal();
  }

  set ratio(value: BigDecimal) {
    this.set("ratio", Value.fromBigDecimal(value));
  }
}
