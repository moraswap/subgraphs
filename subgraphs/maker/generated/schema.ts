// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Maker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Maker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Maker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Maker", id.toString(), this);
  }

  static load(id: string): Maker | null {
    return store.get("Maker", id) as Maker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get moraServed(): BigDecimal {
    let value = this.get("moraServed");
    return value.toBigDecimal();
  }

  set moraServed(value: BigDecimal) {
    this.set("moraServed", Value.fromBigDecimal(value));
  }

  get moraServedUSD(): BigDecimal {
    let value = this.get("moraServedUSD");
    return value.toBigDecimal();
  }

  set moraServedUSD(value: BigDecimal) {
    this.set("moraServedUSD", Value.fromBigDecimal(value));
  }

  get totalServings(): BigInt {
    let value = this.get("totalServings");
    return value.toBigInt();
  }

  set totalServings(value: BigInt) {
    this.set("totalServings", Value.fromBigInt(value));
  }

  get servers(): Array<string> {
    let value = this.get("servers");
    return value.toStringArray();
  }

  set servers(value: Array<string>) {
    this.set("servers", Value.fromStringArray(value));
  }

  get servings(): Array<string> {
    let value = this.get("servings");
    return value.toStringArray();
  }

  set servings(value: Array<string>) {
    this.set("servings", Value.fromStringArray(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Server extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Server entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Server entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Server", id.toString(), this);
  }

  static load(id: string): Server | null {
    return store.get("Server", id) as Server | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maker(): string {
    let value = this.get("maker");
    return value.toString();
  }

  set maker(value: string) {
    this.set("maker", Value.fromString(value));
  }

  get moraServed(): BigDecimal {
    let value = this.get("moraServed");
    return value.toBigDecimal();
  }

  set moraServed(value: BigDecimal) {
    this.set("moraServed", Value.fromBigDecimal(value));
  }

  get moraServedUSD(): BigDecimal {
    let value = this.get("moraServedUSD");
    return value.toBigDecimal();
  }

  set moraServedUSD(value: BigDecimal) {
    this.set("moraServedUSD", Value.fromBigDecimal(value));
  }

  get totalServings(): BigInt {
    let value = this.get("totalServings");
    return value.toBigInt();
  }

  set totalServings(value: BigInt) {
    this.set("totalServings", Value.fromBigInt(value));
  }

  get servings(): Array<string> {
    let value = this.get("servings");
    return value.toStringArray();
  }

  set servings(value: Array<string>) {
    this.set("servings", Value.fromStringArray(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Serving extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Serving entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Serving entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Serving", id.toString(), this);
  }

  static load(id: string): Serving | null {
    return store.get("Serving", id) as Serving | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maker(): string {
    let value = this.get("maker");
    return value.toString();
  }

  set maker(value: string) {
    this.set("maker", Value.fromString(value));
  }

  get server(): string {
    let value = this.get("server");
    return value.toString();
  }

  set server(value: string) {
    this.set("server", Value.fromString(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }

  get token0(): Bytes {
    let value = this.get("token0");
    return value.toBytes();
  }

  set token0(value: Bytes) {
    this.set("token0", Value.fromBytes(value));
  }

  get token0Symbol(): string {
    let value = this.get("token0Symbol");
    return value.toString();
  }

  set token0Symbol(value: string) {
    this.set("token0Symbol", Value.fromString(value));
  }

  get token1(): Bytes {
    let value = this.get("token1");
    return value.toBytes();
  }

  set token1(value: Bytes) {
    this.set("token1", Value.fromBytes(value));
  }

  get token1Symbol(): string {
    let value = this.get("token1Symbol");
    return value.toString();
  }

  set token1Symbol(value: string) {
    this.set("token1Symbol", Value.fromString(value));
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get moraServed(): BigDecimal {
    let value = this.get("moraServed");
    return value.toBigDecimal();
  }

  set moraServed(value: BigDecimal) {
    this.set("moraServed", Value.fromBigDecimal(value));
  }

  get moraServedUSD(): BigDecimal {
    let value = this.get("moraServedUSD");
    return value.toBigDecimal();
  }

  set moraServedUSD(value: BigDecimal) {
    this.set("moraServedUSD", Value.fromBigDecimal(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get dayData(): string | null {
    let value = this.get("dayData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dayData(value: string | null) {
    if (value === null) {
      this.unset("dayData");
    } else {
      this.set("dayData", Value.fromString(value as string));
    }
  }
}

export class ServingDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ServingDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ServingDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ServingDayData", id.toString(), this);
  }

  static load(id: string): ServingDayData | null {
    return store.get("ServingDayData", id) as ServingDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get moraServed(): BigDecimal {
    let value = this.get("moraServed");
    return value.toBigDecimal();
  }

  set moraServed(value: BigDecimal) {
    this.set("moraServed", Value.fromBigDecimal(value));
  }

  get moraServedUSD(): BigDecimal {
    let value = this.get("moraServedUSD");
    return value.toBigDecimal();
  }

  set moraServedUSD(value: BigDecimal) {
    this.set("moraServedUSD", Value.fromBigDecimal(value));
  }

  get totalServings(): BigInt {
    let value = this.get("totalServings");
    return value.toBigInt();
  }

  set totalServings(value: BigInt) {
    this.set("totalServings", Value.fromBigInt(value));
  }

  get servings(): Array<string> | null {
    let value = this.get("servings");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set servings(value: Array<string> | null) {
    if (value === null) {
      this.unset("servings");
    } else {
      this.set("servings", Value.fromStringArray(value as Array<string>));
    }
  }
}
