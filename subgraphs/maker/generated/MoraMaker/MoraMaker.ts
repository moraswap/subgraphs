// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogConvertSingleToken extends ethereum.Event {
  get params(): LogConvertSingleToken__Params {
    return new LogConvertSingleToken__Params(this);
  }
}

export class LogConvertSingleToken__Params {
  _event: LogConvertSingleToken;

  constructor(event: LogConvertSingleToken) {
    this._event = event;
  }

  get server(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountMORA(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountUSDC(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LogConvertToMORA extends ethereum.Event {
  get params(): LogConvertToMORA__Params {
    return new LogConvertToMORA__Params(this);
  }
}

export class LogConvertToMORA__Params {
  _event: LogConvertToMORA;

  constructor(event: LogConvertToMORA) {
    this._event = event;
  }

  get server(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token0(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LogConvertToUSDC extends ethereum.Event {
  get params(): LogConvertToUSDC__Params {
    return new LogConvertToUSDC__Params(this);
  }
}

export class LogConvertToUSDC__Params {
  _event: LogConvertToUSDC;

  constructor(event: LogConvertToUSDC) {
    this._event = event;
  }

  get server(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token0(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LogMoraBridgeSet extends ethereum.Event {
  get params(): LogMoraBridgeSet__Params {
    return new LogMoraBridgeSet__Params(this);
  }
}

export class LogMoraBridgeSet__Params {
  _event: LogMoraBridgeSet;

  constructor(event: LogMoraBridgeSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bridge(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LogMoraBuybackPercentSet extends ethereum.Event {
  get params(): LogMoraBuybackPercentSet__Params {
    return new LogMoraBuybackPercentSet__Params(this);
  }
}

export class LogMoraBuybackPercentSet__Params {
  _event: LogMoraBuybackPercentSet;

  constructor(event: LogMoraBuybackPercentSet) {
    this._event = event;
  }

  get percent(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogTreasurySet extends ethereum.Event {
  get params(): LogTreasurySet__Params {
    return new LogTreasurySet__Params(this);
  }
}

export class LogTreasurySet__Params {
  _event: LogTreasurySet;

  constructor(event: LogTreasurySet) {
    this._event = event;
  }

  get treasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogUsdcBridgeSet extends ethereum.Event {
  get params(): LogUsdcBridgeSet__Params {
    return new LogUsdcBridgeSet__Params(this);
  }
}

export class LogUsdcBridgeSet__Params {
  _event: LogUsdcBridgeSet;

  constructor(event: LogUsdcBridgeSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bridge(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MoraMaker extends ethereum.SmartContract {
  static bind(address: Address): MoraMaker {
    return new MoraMaker("MoraMaker", address);
  }

  boughtMora(): BigInt {
    let result = super.call("boughtMora", "boughtMora():(uint256)", []);

    return result[0].toBigInt();
  }

  try_boughtMora(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("boughtMora", "boughtMora():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  boughtUsdc(): BigInt {
    let result = super.call("boughtUsdc", "boughtUsdc():(uint256)", []);

    return result[0].toBigInt();
  }

  try_boughtUsdc(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("boughtUsdc", "boughtUsdc():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  moraBridgeFor(token: Address): Address {
    let result = super.call(
      "moraBridgeFor",
      "moraBridgeFor(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toAddress();
  }

  try_moraBridgeFor(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "moraBridgeFor",
      "moraBridgeFor(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  moraBuybackPercent(): BigInt {
    let result = super.call(
      "moraBuybackPercent",
      "moraBuybackPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_moraBuybackPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "moraBuybackPercent",
      "moraBuybackPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdcBridgeFor(token: Address): Address {
    let result = super.call(
      "usdcBridgeFor",
      "usdcBridgeFor(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toAddress();
  }

  try_usdcBridgeFor(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "usdcBridgeFor",
      "usdcBridgeFor(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  xmora(): Address {
    let result = super.call("xmora", "xmora():(address)", []);

    return result[0].toAddress();
  }

  try_xmora(): ethereum.CallResult<Address> {
    let result = super.tryCall("xmora", "xmora():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _xmora(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _mora(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _usdc(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConvertCall extends ethereum.Call {
  get inputs(): ConvertCall__Inputs {
    return new ConvertCall__Inputs(this);
  }

  get outputs(): ConvertCall__Outputs {
    return new ConvertCall__Outputs(this);
  }
}

export class ConvertCall__Inputs {
  _call: ConvertCall;

  constructor(call: ConvertCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConvertCall__Outputs {
  _call: ConvertCall;

  constructor(call: ConvertCall) {
    this._call = call;
  }
}

export class ConvertMultipleCall extends ethereum.Call {
  get inputs(): ConvertMultipleCall__Inputs {
    return new ConvertMultipleCall__Inputs(this);
  }

  get outputs(): ConvertMultipleCall__Outputs {
    return new ConvertMultipleCall__Outputs(this);
  }
}

export class ConvertMultipleCall__Inputs {
  _call: ConvertMultipleCall;

  constructor(call: ConvertMultipleCall) {
    this._call = call;
  }

  get token0(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get token1(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class ConvertMultipleCall__Outputs {
  _call: ConvertMultipleCall;

  constructor(call: ConvertMultipleCall) {
    this._call = call;
  }
}

export class ConvertMultipleSingleTokenCall extends ethereum.Call {
  get inputs(): ConvertMultipleSingleTokenCall__Inputs {
    return new ConvertMultipleSingleTokenCall__Inputs(this);
  }

  get outputs(): ConvertMultipleSingleTokenCall__Outputs {
    return new ConvertMultipleSingleTokenCall__Outputs(this);
  }
}

export class ConvertMultipleSingleTokenCall__Inputs {
  _call: ConvertMultipleSingleTokenCall;

  constructor(call: ConvertMultipleSingleTokenCall) {
    this._call = call;
  }

  get token(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ConvertMultipleSingleTokenCall__Outputs {
  _call: ConvertMultipleSingleTokenCall;

  constructor(call: ConvertMultipleSingleTokenCall) {
    this._call = call;
  }
}

export class ConvertSingleTokenCall extends ethereum.Call {
  get inputs(): ConvertSingleTokenCall__Inputs {
    return new ConvertSingleTokenCall__Inputs(this);
  }

  get outputs(): ConvertSingleTokenCall__Outputs {
    return new ConvertSingleTokenCall__Outputs(this);
  }
}

export class ConvertSingleTokenCall__Inputs {
  _call: ConvertSingleTokenCall;

  constructor(call: ConvertSingleTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConvertSingleTokenCall__Outputs {
  _call: ConvertSingleTokenCall;

  constructor(call: ConvertSingleTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMoraBridgeCall extends ethereum.Call {
  get inputs(): SetMoraBridgeCall__Inputs {
    return new SetMoraBridgeCall__Inputs(this);
  }

  get outputs(): SetMoraBridgeCall__Outputs {
    return new SetMoraBridgeCall__Outputs(this);
  }
}

export class SetMoraBridgeCall__Inputs {
  _call: SetMoraBridgeCall;

  constructor(call: SetMoraBridgeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bridge(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetMoraBridgeCall__Outputs {
  _call: SetMoraBridgeCall;

  constructor(call: SetMoraBridgeCall) {
    this._call = call;
  }
}

export class SetMoraBuybackPercentCall extends ethereum.Call {
  get inputs(): SetMoraBuybackPercentCall__Inputs {
    return new SetMoraBuybackPercentCall__Inputs(this);
  }

  get outputs(): SetMoraBuybackPercentCall__Outputs {
    return new SetMoraBuybackPercentCall__Outputs(this);
  }
}

export class SetMoraBuybackPercentCall__Inputs {
  _call: SetMoraBuybackPercentCall;

  constructor(call: SetMoraBuybackPercentCall) {
    this._call = call;
  }

  get _moraBuybackPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMoraBuybackPercentCall__Outputs {
  _call: SetMoraBuybackPercentCall;

  constructor(call: SetMoraBuybackPercentCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class SetUsdcBridgeCall extends ethereum.Call {
  get inputs(): SetUsdcBridgeCall__Inputs {
    return new SetUsdcBridgeCall__Inputs(this);
  }

  get outputs(): SetUsdcBridgeCall__Outputs {
    return new SetUsdcBridgeCall__Outputs(this);
  }
}

export class SetUsdcBridgeCall__Inputs {
  _call: SetUsdcBridgeCall;

  constructor(call: SetUsdcBridgeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bridge(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetUsdcBridgeCall__Outputs {
  _call: SetUsdcBridgeCall;

  constructor(call: SetUsdcBridgeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
